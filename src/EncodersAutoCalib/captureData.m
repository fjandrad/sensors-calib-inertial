%% clear all variables and close all previous figures
iDynTree.Vector3(); % WORKAROUND for being able to load yarp later.
clear
close all
clc

%% Main interface parameters ==============================================
robotName = 'icubSim';
calibedParts = {'torso'};
dataPath  = '../../data/calibration/dumper';

%% Home single step sequence

% For limbs calibration
homeCalibLimbs.labels = {...
    'ctrl','ctrl','ctrl','ctrl','ctrl','ctrl';...
    'pos','pos','pos','pos','pos','pos';
    'left_arm','right_arm','left_leg','right_leg','torso','head'};
homeCalibLimbs.val = {...
    [0 45 0 50 0 0 0],...
    [0 45 0 50 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};

% For torso calibration
homeCalibTorso = homeCalibLimbs;
homeCalibTorso.val = {...
    [-30 30 -30 20 0 0 0],...
    [-30 30 -30 20 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};

%% Motion sequences
% (a single sequence is intended to move all defined parts synchronously,
% motions from 2 different sequences should be run asynchronously)
% each calibPart should be caibrated within a single sequence.

% define tables for each limb
left_arm_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'     ,'meas'     ;...
    'pos'                ,'vel'           ,'joint'    ,'joint'    ,'acc'      ;...
    'left_arm'           ,'left_arm'      ,'left_arm' ,'torso'    ,'left_hand'};
left_arm_seqParams.val = {...
    [  0 45 -23 50 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [  0 45  49 50 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [  0 45   0 50 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [-20 30 -30 90 0 0 0],repmat(10,[1 7]),false      ,false      ,false      ;...
    [-20 30 -30  0 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [-20 30 -30 90 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [ 0  45   0 50 0 0 0],repmat(10,[1 7]),false      ,false      ,false      ;...
    [ 0  45   0 50 0 0 0],repmat(10,[1 7]),false      ,false      ,false      };

right_arm_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'     ,'meas'      ;...
    'pos'                ,'vel'           ,'joint'    ,'joint'    ,'acc'       ;...
    'right_arm'          ,'right_arm'     ,'right_arm','torso'    ,'right_hand'};
right_arm_seqParams.val = left_arm_seqParams.val;

left_leg_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'    ;...
    'pos'                ,'vel'           ,'joint'    ,'acc'     ;...
    'left_leg'           ,'left_leg'      ,'left_leg' ,'left_leg'};
left_leg_seqParams.val = {...
    [ 0 45 -60   0   0   0],repmat(10,[1 6]),false    ,false    ;...
    [ 0 45  60   0   0   0],repmat( 4,[1 6]),true     ,true     ;...
    [80 30   0   0   0   0],repmat(10,[1 6]),false    ,false    ;...
    [80 30   0 -80   0   0],repmat( 4,[1 6]),true     ,true     ;...
    [80 30   0 -80 -25   0],repmat( 2,[1 6]),true     ,true     ;...
    [80 30   0 -80  25   0],repmat( 2,[1 6]),true     ,true     ;...
    [80 30   0 -80   0 -20],repmat( 2,[1 6]),true     ,true     ;...
    [80 30   0 -80   0  20],repmat( 2,[1 6]),true     ,true     };
    
right_leg_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'     ;...
    'pos'                ,'vel'           ,'joint'    ,'acc'      ;...
    'right_leg'          ,'right_leg'     ,'right_leg','right_leg'};
right_leg_seqParams.val = left_leg_seqParams.val;

torso_seqParams.labels = {...
    'ctrl'       ,'ctrl'          ,'meas'     ,'meas' ;...
    'pos'        ,'vel'           ,'joint'    ,'acc'  ;...
    'torso'      ,'torso'         ,'torso'    ,'torso'};
torso_seqParams.val = {...
    [ 45   0   0],repmat(10,[1 3]),false      ,false      ;...
    [ 45   0 -45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0  45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0 -45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0  45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0   0],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0   0],repmat(10,[1 3]),false      ,false      ;...
    [ 45   0   0],repmat(10,[1 3]),false      ,false      };

head_seqParams.labels = {...
    'ctrl' ,'ctrl'          ,'meas'     ,'meas'     ,'meas';...
    'pos'  ,'vel'           ,'joint'    ,'joint'    ,'imu' ;...
    'head' ,'head'          ,'head'     ,'torso'    ,'head'};
head_seqParams.val = {...
    [0 0 0],repmat(10,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),true       ,true       ,true       ;...
    [0 0 0],repmat( 4,[1 3]),true       ,true       ,true       ;...
    [0 0 0],repmat( 4,[1 3]),true       ,true       ,true       ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      };

% define sequences for limbs {1} and torso {2} calibration
seqHomeParams{1} = homeCalibLimbs;
seqHomeParams{2} = homeCalibTorso;
seqEndParams     = homeCalibLimbs;

% Map parts to sequences and params
selector.calibedParts = {...
    'left_arm','right_arm',...
    'left_leg','right_leg',...
    'torso','head'};
selector.calibedSensors = {...
    {'joint'},{'joint'},...
    {'joint'},{'joint'},...
    {'joint'},{'joint'}};
selector.setIdx  = {1,1,1,1,2,1}; % max index must not exceed max index of seqHomePArams
selector.seqParams = {...
    left_arm_seqParams,right_arm_seqParams,...
    left_leg_seqParams,right_leg_seqParams,...
    torso_seqParams,head_seqParams};

            
%% Build the Map sequences from input parameters
%
%  - build the homing sequences 'seqHomeParamsMap'
%  - use selector for filtering sequence parameters of requested parts
%  - build the calibrating sequences 'seqParamsMap'
%  - merge the calibrating sequences 'seqParamsMapMerged'

% ==== Build the homing sequences 'seqHomeParamsMap' and the end sequence:

% First, init MotionSequencer static data, clean YARP ports
clear SequenceParams;
SensorDataYarpI.clean();

% Init sequence parameters from data acquisition input configuration
sequenceParams = SequenceParams(calibedParts,selector,seqHomeParams,seqEndParams);

% Build sequences for the motion runner
sequences = sequenceParams.buildMapSequences();


%% Training data acquisition

% Create Yarp data interface. It can create the necessary yarp ports
% for logging the data and holds a method for connecting or disconnecting
% the ports. It also access data previously logged.
logger = SensorDataYarpI(robotName,dataPath);
% Configure callback logger commands
logCmd.start = @logger.connect;
logCmd.stop  = @logger.disconnect;
logCmd.new   = @logger.newLog;
logCmd.close = @logger.closeLog;

% create motion sequencer with defined sequences
sequencer = MotionSequencer('EncodersCalibrator',robotName,sequences,logCmd);

% run sequencer until all data is acquired
sequencer.run();

% The data acquisition is complete. The sequencer has sent a stop request
% to the logger through 'logCmd' callback.
% The control board device is removed and the yarp devices and objects
% are deleted along with the objects in this context.

% print the sensor data log files info
logger.print();

% Acquisition complete!
disp('Sensor data acquisition complete !!!');

% Uninitialize yarp
yarp.Network.fini();
