%% clear all variables and close all previous figures
clear
close all
clc

%% Main interface parameters ==============================================
parts = {'left_leg'};

%% Home positions
homeParts = {'left_arm','right_arm','left_leg','right_leg','torso','head'};
homeSpeeds = {...
    repmat(10,[1 7]),...
    repmat(10,[1 7]),...
    repmat(10,[1 6]),...
    repmat(10,[1 6]),...
    repmat(10,[1 3]),...
    repmat(10,[1 3])}
homePositionsCalibLimbs = {...
    [0 45 0 50 0 0 0],...
    [0 45 0 50 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]}
homePositionsCalibTorso = {...
    [-30 30 -30 20 0 0 0],...
    [-30 30 -30 20 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]}

%% Motion sequencers
% (a single sequencer moves all defined parts synchronously,
%  motions from 2 different sequencers are run asynchronously)

% Sequencer 1: define tables for each limb
sequencer1.parts = {'left_arm','right_arm','left_leg','right_leg'};

left_arm_posVel_seq = {...
    [0 45 -30 90 0 0 0],repmat(10,[1 7]),false;...
    [0 45 -23 50 0 0 0],repmat( 4,[1 7]),true;...
    [0 45  49 50 0 0 0],repmat( 4,[1 7]),true;...
    [0 45   0 50 0 0 0],repmat( 4,[1 7]),true;...
    [0 45  49 90 0 0 0],repmat(10,[1 7]),false;...
    [0 45  49  0 0 0 0],repmat( 4,[1 7]),true;...
    [0 45  49 50 0 0 0],repmat( 4,[1 7]),true;...
    [],[],false};
right_arm_posVel_seq = left_arm_posVel_seq;
left_leg_posVel_seq = {...
    [ 0 45 -60   0   0   0],repmat(10,[1 6]),false;...
    [ 0 45  60   0   0   0],repmat( 4,[1 6]),true;...
    [80 45   0   0   0   0],repmat(10,[1 6]),false;...
    [80 45   0 -80   0   0],repmat( 4,[1 6]),true;...
    [80 45   0 -80 -25   0],repmat( 2,[1 6]),true;...
    [80 45   0 -80  25   0],repmat( 2,[1 6]),true;...
    [80 45   0 -80   0 -20],repmat( 2,[1 6]),true;...
    [80 45   0 -80   0  20],repmat( 2,[1 6]),true};
right_leg_posVel_seq = left_leg_posVel_seq;

% Seuqencer 1: concatenate previous tables: All parts move synchronously
sequencer1.pos = [...
    left_arm_posVel_seq(:,1),right_arm_posVel_seq(:,1),...
    left_leg_posVel_seq(:,1),right_leg_posVel_seq(:,1)];

sequencer1.vel = [...
    left_arm_posVel_seq(:,2),right_arm_posVel_seq(:,2),...
    left_leg_posVel_seq(:,2),right_leg_posVel_seq(:,2)];

sequencer1.acquire = [...
    left_arm_posVel_seq(:,3),right_arm_posVel_seq(:,3),...
    left_leg_posVel_seq(:,3),right_leg_posVel_seq(:,3)];

% Sequencer 2: define tables for each limb
sequencer2.parts = {'torso'};

torso_posVel_seq = {...
    [0 0 0],repmat(10,[1 3]),false;...
    [0 0 0],repmat(10,[1 3]),true;...
    [0 0 0],repmat(10,[1 3]),true;...
    [0 0 0],repmat(10,[1 3]),true};

% Seuqencer 2: concatenate previous tables: All parts move synchronously
sequencer2.pos = torso_posVel_seq(:,1);

sequencer2.vel = torso_posVel_seq(:,2);

sequencer2.acquire = torso_posVel_seq(:,3);

% Run sequencer 1 and 2 iteratively
sequencers.chain = 'iterative'
sequencers.seq = {sequencer1,sequencer2};

%% Data generation
%generateDataForPart(part,motionPath);

ctrlBoardRemap = RemoteControlBoardRemapper('icubSim',parts);

ctrlBoardRemap.moveToPos([0 0 0 0 0 0],'refVel',repmat(4,1,6));

[~,mat]=ctrlBoardRemap.getEncoders()
