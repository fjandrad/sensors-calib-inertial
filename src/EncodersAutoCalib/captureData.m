%% clear all variables and close all previous figures
clear
close all
clc

%% Main interface parameters ==============================================
robotName = 'icubSim';
calibedParts = {'right_arm','head'};
dataPath  = '../../data/calibration/dumper/icubSim#1/';

%% Home single step sequence

% For limbs calibration
homeCalibLimbs.labels = {...
    'ctrl','ctrl','ctrl','ctrl','ctrl','ctrl';...
    'pos','pos','pos','pos','pos','pos';
    'left_arm','right_arm','left_leg','right_leg','torso','head'};
homeCalibLimbs.val = {...
    [0 45 0 50 0 0 0],...
    [0 45 0 50 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};

% For torso calibration
homeCalibTorso = homeCalibLimbs;
homeCalibTorso.val = {...
    [-30 30 -30 20 0 0 0],...
    [-30 30 -30 20 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};

%% Motion sequences
% (a single sequence is intended to move all defined parts synchronously,
% motions from 2 different sequences should be run asynchronously)
% each calibPart should be caibrated within a single sequence.

% define tables for each limb
left_arm_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'     ,'meas'     ;...
    'pos'                ,'vel'           ,'joint'    ,'joint'    ,'acc'      ;...
    'left_arm'           ,'left_arm'      ,'left_arm' ,'torso'    ,'left_hand'};
left_arm_seqParams.val = {...
    [  0 45 -23 50 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [  0 45  49 50 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [  0 45   0 50 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [-20 30 -30 90 0 0 0],repmat(10,[1 7]),false      ,false      ,false      ;...
    [-20 30 -30  0 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [-20 30 -30 90 0 0 0],repmat( 4,[1 7]),true       ,true       ,true       ;...
    [ 0  45   0 50 0 0 0],repmat(10,[1 7]),false      ,false      ,false      ;...
    [ 0  45   0 50 0 0 0],repmat(10,[1 7]),false      ,false      ,false      };

right_arm_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'     ,'meas'      ;...
    'pos'                ,'vel'           ,'joint'    ,'joint'    ,'acc'       ;...
    'right_arm'          ,'right_arm'     ,'right_arm','torso'    ,'right_hand'};
right_arm_seqParams.val = left_arm_seqParams.val;

left_leg_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'    ;...
    'pos'                ,'vel'           ,'joint'    ,'acc'     ;...
    'left_leg'           ,'left_leg'      ,'left_leg' ,'left_leg'};
left_leg_seqParams.val = {...
    [ 0 45 -60   0   0   0],repmat(10,[1 6]),false    ,false    ;...
    [ 0 45  60   0   0   0],repmat( 4,[1 6]),true     ,true     ;...
    [80 30   0   0   0   0],repmat(10,[1 6]),false    ,false    ;...
    [80 30   0 -80   0   0],repmat( 4,[1 6]),true     ,true     ;...
    [80 30   0 -80 -25   0],repmat( 2,[1 6]),true     ,true     ;...
    [80 30   0 -80  25   0],repmat( 2,[1 6]),true     ,true     ;...
    [80 30   0 -80   0 -20],repmat( 2,[1 6]),true     ,true     ;...
    [80 30   0 -80   0  20],repmat( 2,[1 6]),true     ,true     };

right_leg_seqParams.labels = {...
    'ctrl'               ,'ctrl'          ,'meas'     ,'meas'     ;...
    'pos'                ,'vel'           ,'joint'    ,'acc'      ;...
    'right_leg'          ,'right_leg'     ,'right_leg','right_leg'};
right_leg_seqParams.val = left_leg_seqParams.val;

torso_seqParams.labels = {...
    'ctrl'       ,'ctrl'          ,'meas'     ,'meas' ;...
    'pos'        ,'vel'           ,'joint'    ,'acc'  ;...
    'torso'      ,'torso'         ,'torso'    ,'torso'};
torso_seqParams.val = {...
    [ 45   0   0],repmat(10,[1 3]),false      ,false      ;...
    [ 45   0 -45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0  45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0 -45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0  45],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0   0],repmat( 4,[1 3]),true       ,true       ;...
    [ 45   0   0],repmat(10,[1 3]),false      ,false      ;...
    [ 45   0   0],repmat(10,[1 3]),false      ,false      };

head_seqParams.labels = {...
    'ctrl' ,'ctrl'          ,'meas'     ,'meas'     ,'meas';...
    'pos'  ,'vel'           ,'joint'    ,'joint'    ,'acc' ;...
    'head' ,'head'          ,'head'     ,'torso'    ,'head'};
head_seqParams.val = {...
    [0 0 0],repmat(10,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),true       ,true       ,true       ;...
    [0 0 0],repmat( 4,[1 3]),true       ,true       ,true       ;...
    [0 0 0],repmat( 4,[1 3]),true       ,true       ,true       ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      ;...
    [0 0 0],repmat( 4,[1 3]),false      ,false      ,false      };

% define sequences for limbs {1} and torso {2} calibration
seqHomeParams{1} = homeCalibLimbs;
seqHomeParams{2} = homeCalibTorso;
seqEndParams     = homeCalibLimbs;

% Map parts to sequences and params
selector.calibedParts = {...
    'left_arm','right_arm',...
    'left_leg','right_leg',...
    'torso','head'};
selector.setIdx  = {1,1,1,1,2,1}; % max index must not exceed max index of seqHomePArams
selector.seqParams = {...
    left_arm_seqParams,right_arm_seqParams,...
    left_leg_seqParams,right_leg_seqParams,...
    torso_seqParams,head_seqParams};
selector.seqParamsMap = cell(size(selector.seqParams));

%% Build the Map sequences from input parameters
%
%  - build the homing sequences 'seqHomeParamsMap'
%  - use selector for filtering sequence parameters of requested parts
%  - build the calibrating sequences 'seqParamsMap'
%  - merge the calibrating sequences 'seqParamsMapMerged'

% Check that requested calibrated parts are handled
if ~ismember(calibedParts,selector.calibedParts)
    error('...the part list is empty or at least one part in the list is not handled!');
end

% ==== Build the homing sequences 'seqHomeParamsMap':
seqHomeParamsMap = cellfun(...
    @(seqParams) MotionSequencer.seqParams2map(seqParams),...
    seqHomeParams,...
    'UniformOutput',false);

seqEndParamsMap = MotionSequencer.seqParams2map(seqEndParams);

% ==== Use selector for filtering sequence parameters of requested parts:
% Filter selector tables keeping only parts requested for calibration
filter = ismember(selector.calibedParts,calibedParts);
filteredSelector = structfun(@(list) list(filter),selector,'UniformOutput',false);

% From this point on, the list of parts to be calibrated is irrelevant. We
% will index parameters by pos/part,vel/part and sensor/part keys, actually
% required for feeding the control board driver and opening the right yarp
% ports for dumping the sensor data (joints, accelerometers, gyros,
% etc...).

% ==== build the calibrating sequences 'seqParamsMap':
% Go through seqParams structures in the selector and convert each structure
% into a map (filteredSelector.seqParamsMap)
filteredSelector.seqParamsMap = cellfun(...
    @(seqParams) MotionSequencer.seqParams2map(seqParams),...
    filteredSelector.seqParams,...
    'UniformOutput',false);

% ==== Merge all maps into macro maps (1 macro map per sequence):
% - first, init seqParamsMapMerged (empty macro maps)
seqParamsMapMerged(1,1:max(cell2mat(filteredSelector.setIdx)))={containers.Map()};
% - merge sequence with next map in the list
for idx = 1:numel(filteredSelector.seqParamsMap)
    % select both current sequence and next map to be merged
    sequence = seqParamsMapMerged{filteredSelector.setIdx{idx}};
    seqParamsMap = filteredSelector.seqParamsMap{idx};
    
    % merge in both orders:
    mergedSeqA = [sequence;seqParamsMap]; % 'seqParamsMap' elements overwrites common ones in 'sequence'
    mergedSeqB = [seqParamsMap;sequence]; % 'sequence' elements overwrites common ones in 'seqParamsMap'
    
    % list elements holding 'meas' label (potencially conflicting)
    ctrlOrMeasLabels = cellfun(@(aStruct) aStruct.labels{1},mergedSeqA.values,'UniformOutput',false);
    keys = mergedSeqA.keys;
    measElemsKeys = keys(ismember(ctrlOrMeasLabels,'meas'));
    
    % fine merge those conflicting elements
    orLogicLists = @(a,b) num2cell(cell2mat(a) | cell2mat(b),2);
    mergedValue = @(a,b) struct('labels',{a.labels},'val',{orLogicLists(a.val,b.val)});
    measElemsValues = cellfun(...
        @(key) mergedValue(mergedSeqA(key),mergedSeqB(key)),...
        measElemsKeys,...
        'UniformOutput',false);
    
    % update sequence
    seqParamsMapMerged{filteredSelector.setIdx{idx}} = ...
        [mergedSeqA;containers.Map(measElemsKeys,measElemsValues)];
end


%% Fuse homing and calibrating Map sequences
%
%  (each homing sequence matches a calibrating sequence)

% Concatenate pairs of homing/calibrating sequences, dropping empty ones
remEmpty=@(aListOf2)aListOf2([~isempty(aListOf2{1}) true]);
sequences = cellfun(...
    @(seqParamsMap1,seqParamsMap2) remEmpty([{seqParamsMap1},{seqParamsMap2}]),...
    seqHomeParams,seqParamsMapMerged,...
    'UniformOutput',false);
% remove encapsulation and add final Goto-end position
sequences = [sequences{:},{seqEndParamsMap}];


%% Build sequences from maps to MotionSequencer runner format
runnerSequences = cellfun(...
    @(sequence) seqMap2runner(sequence),...
    sequences,...
    'UniformOutput',false);


%% Training data acquisition

% Create Yarp data interface. It can create the necessary yarp ports
% for logging the data and holds a method for connecting or disconnecting
% the ports. It also access data previously logged.
logger = SensorDataYarpI(robotName,dataPath);
% Configure callback logger commands
logCmd.start = @logger.connect;
logCmd.stop  = @logger.disconnect;
logCmd.new   = @logger.newLog;
logCmd.close = @logger.closeLog;

% create motion sequencer with defined sequences
sequencer = MotionSequencer('EncodersCalibrator',robotName,sequences,logCmd);

% run sequencer until all data is acquired
sequencer.run();

% The data acquisition is complete. The sequencer has sent a stop request
% to the logger through 'acquire' method.
% The control board device is removed and the yarp devices and objects
% are deleted along with the objects in this context.
