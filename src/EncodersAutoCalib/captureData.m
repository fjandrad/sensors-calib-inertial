%% clear all variables and close all previous figures
clear
close all
clc

%% Main interface parameters ==============================================
parts = {'left_leg'};

%% Home single step sequence

% For limbs calibration
homeCalibLimbs.parts = {'left_arm','right_arm','left_leg','right_leg','torso','head'};
homeCalibLimbs.pos = {...
    [0 45 0 50 0 0 0],...
    [0 45 0 50 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};
homeCalibLimbs.vel = {...
    repmat(10,[1 7]),...
    repmat(10,[1 7]),...
    repmat(10,[1 6]),...
    repmat(10,[1 6]),...
    repmat(10,[1 3]),...
    repmat(10,[1 3])};
homeCalibLimbs.acquire(size(homeCalibLimbs.parts)) = {false};

% For torso calibration
homeCalibTorso = homeCalibLimbs;
homeCalibTorso.positions = {...
    [-30 30 -30 20 0 0 0],...
    [-30 30 -30 20 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};

%% Motion sequences
% (a single sequence is intended to move all defined parts synchronously,
%  motions from 2 different sequences should be run asynchronously)

% sequence 1: define tables for each limb
sequenceCalibLimbs.parts = {'left_arm','right_arm','left_leg','right_leg'};

left_arm_posVel_seq = {...
    [0 45 -30 90 0 0 0],repmat(10,[1 7]),false;...
    [0 45 -23 50 0 0 0],repmat( 4,[1 7]),true;...
    [0 45  49 50 0 0 0],repmat( 4,[1 7]),true;...
    [0 45   0 50 0 0 0],repmat( 4,[1 7]),true;...
    [0 45  49 90 0 0 0],repmat(10,[1 7]),false;...
    [0 45  49  0 0 0 0],repmat( 4,[1 7]),true;...
    [0 45  49 50 0 0 0],repmat( 4,[1 7]),true;...
    [],[],false};
right_arm_posVel_seq = left_arm_posVel_seq;
left_leg_posVel_seq = {...
    [ 0 45 -60   0   0   0],repmat(10,[1 6]),false;...
    [ 0 45  60   0   0   0],repmat( 4,[1 6]),true;...
    [80 45   0   0   0   0],repmat(10,[1 6]),false;...
    [80 45   0 -80   0   0],repmat( 4,[1 6]),true;...
    [80 45   0 -80 -25   0],repmat( 2,[1 6]),true;...
    [80 45   0 -80  25   0],repmat( 2,[1 6]),true;...
    [80 45   0 -80   0 -20],repmat( 2,[1 6]),true;...
    [80 45   0 -80   0  20],repmat( 2,[1 6]),true};
right_leg_posVel_seq = left_leg_posVel_seq;

% Seuqencer 1: concatenate previous tables: All parts move synchronously
sequenceCalibLimbs.pos = [...
    left_arm_posVel_seq(:,1),right_arm_posVel_seq(:,1),...
    left_leg_posVel_seq(:,1),right_leg_posVel_seq(:,1)];

sequenceCalibLimbs.vel = [...
    left_arm_posVel_seq(:,2),right_arm_posVel_seq(:,2),...
    left_leg_posVel_seq(:,2),right_leg_posVel_seq(:,2)];

sequenceCalibLimbs.acquire = [...
    left_arm_posVel_seq(:,3),right_arm_posVel_seq(:,3),...
    left_leg_posVel_seq(:,3),right_leg_posVel_seq(:,3)];

% sequence 2: define tables for each limb
sequenceCalibTorso.parts = {'torso'};

torso_posVel_seq = {...
    [0 0 0],repmat(10,[1 3]),false;...
    [0 0 0],repmat(10,[1 3]),true;...
    [0 0 0],repmat(10,[1 3]),true;...
    [0 0 0],repmat(10,[1 3]),true};

% Seuqencer 2: concatenate previous tables: All parts move synchronously
sequenceCalibTorso.pos = torso_posVel_seq(:,1);

sequenceCalibTorso.vel = torso_posVel_seq(:,2);

sequenceCalibTorso.acquire = torso_posVel_seq(:,3);

% Run sequence 1 and 2 iteratively
sequences = {...
    homeCalibLimbs;...
    sequenceCalibLimbs;...
    homeCalibTorso;...
    sequenceCalibTorso};

%% Training data acquisition

% create motion sequencer with defined sequences
sequencer = MotionSequencer(sequences);

% iteratively trigger next motion and acquire data

acquireDataForPart(part,sequences);

ctrlBoardRemap = RemoteControlBoardRemapper('icubSim',parts);

ctrlBoardRemap.moveToPos([0 0 0 0 0 0],'refVel',repmat(4,1,6));

[~,mat]=ctrlBoardRemap.getEncoders()
