%% clear all variables and close all previous figures
clear
close all
clc

%% Main interface parameters ==============================================
robotName = 'icubSim';
parts = {'right_arm','right_leg'};
dataPath  = '../../data/calibration/dumper/icubSim#1/';

%% Home single step sequence

% For limbs calibration
homeCalibLimbs.part = {...
    'left_arm','right_arm',...
    'left_leg','right_leg',...
    'torso','head'};
homeCalibLimbs.pos = {...
    [0 45 0 50 0 0 0],...
    [0 45 0 50 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};
homeCalibLimbs.vel = {...
    repmat(10,[1 7]),...
    repmat(10,[1 7]),...
    repmat(10,[1 6]),...
    repmat(10,[1 6]),...
    repmat(10,[1 3]),...
    repmat(10,[1 3])};
homeCalibLimbs.acquire=cell(size(homeCalibLimbs.part));
homeCalibLimbs.acquire(:)={false};

% For torso calibration
homeCalibTorso = homeCalibLimbs;
homeCalibTorso.pos = {...
    [-30 30 -30 20 0 0 0],...
    [-30 30 -30 20 0 0 0],...
    [0 10 0 0 0 0],...
    [0 10 0 0 0 0],...
    [0 0 0],...
    [0 0 0]};

%% Motion sequences
% (a single sequence is intended to move all defined parts synchronously,
%  motions from 2 different sequences should be run asynchronously)

% define tables for each limb
left_arm_posVel_seq = {...
    [  0 45 -23 50 0 0 0],repmat( 4,[1 7]),true;...
    [  0 45  49 50 0 0 0],repmat( 4,[1 7]),true;...
    [  0 45   0 50 0 0 0],repmat( 4,[1 7]),true;...
    [-20 30 -30 90 0 0 0],repmat(10,[1 7]),false;...
    [-20 30 -30  0 0 0 0],repmat( 4,[1 7]),true;...
    [-20 30 -30 90 0 0 0],repmat( 4,[1 7]),true;...
    [ 0  45   0 50 0 0 0],repmat(10,[1 7]),false;...
    [ 0  45   0 50 0 0 0],repmat(10,[1 7]),false};

right_arm_posVel_seq = left_arm_posVel_seq;

left_leg_posVel_seq = {...
    [ 0 45 -60   0   0   0],repmat(10,[1 6]),false;...
    [ 0 45  60   0   0   0],repmat( 4,[1 6]),true;...
    [80 30   0   0   0   0],repmat(10,[1 6]),false;...
    [80 30   0 -80   0   0],repmat( 4,[1 6]),true;...
    [80 30   0 -80 -25   0],repmat( 2,[1 6]),true;...
    [80 30   0 -80  25   0],repmat( 2,[1 6]),true;...
    [80 30   0 -80   0 -20],repmat( 2,[1 6]),true;...
    [80 30   0 -80   0  20],repmat( 2,[1 6]),true};

right_leg_posVel_seq = left_leg_posVel_seq;

torso_posVel_seq = {...
    [ 45   0   0],repmat(10,[1 3]),false;...
    [ 45   0 -45],repmat( 4,[1 3]),true;...
    [ 45   0  45],repmat( 4,[1 3]),true;...
    [ 45   0 -45],repmat( 4,[1 3]),true;...
    [ 45   0  45],repmat( 4,[1 3]),true;...
    [ 45   0   0],repmat( 4,[1 3]),true;...
    [ 45   0   0],repmat(10,[1 3]),false;...
    [ 45   0   0],repmat(10,[1 3]),false};

head_posVel_seq = {...
    [0 0 0],repmat(10,[1 3]),false;...
    [0 0 0],repmat( 4,[1 3]),true;...
    [0 0 0],repmat( 4,[1 3]),true;...
    [0 0 0],repmat( 4,[1 3]),true;...
    [0 0 0],repmat( 4,[1 3]),false;...
    [0 0 0],repmat( 4,[1 3]),false;...
    [0 0 0],repmat( 4,[1 3]),false;...
    [0 0 0],repmat( 4,[1 3]),false};

% define sequences for limbs and torso calibration
[emptySeq.part,emptySeq.pos,emptySeq.vel,emptySeq.acquire]=deal({});
seqSets{1} = {homeCalibLimbs;emptySeq};
seqSets{2} = {homeCalibTorso;emptySeq};

% Map parts to sequences
selector_part = {...
    'left_arm','right_arm',...
    'left_leg','right_leg',...
    'torso','head'};
selector_seqSetIdx  = {1,1,1,1,2,1};
selector_seqParams = {...
    left_arm_posVel_seq,right_arm_posVel_seq,...
    left_leg_posVel_seq,right_leg_posVel_seq,...
    torso_posVel_seq,head_posVel_seq};
selector.seqSetIdx = containers.Map(selector_part,selector_seqSetIdx);
selector.seqParams = containers.Map(selector_part,selector_seqParams);

% Check that requested parts are handled
if ~ismember(parts,keys(selector.seqSetIdx))
    error('...part not handled or part list empty!');
end

% Build sequences: concatenate previous tables depending on 'parts'
for part = parts
    % decapsulate part
    part = part{:};
    % select te target list of sequences
    seqSetIdx = selector.seqSetIdx(part);
    seqParams = selector.seqParams(part);
    % build the sequence
    seqSets{seqSetIdx}{2}.part = [seqSets{seqSetIdx}{2}.part part];
    seqSets{seqSetIdx}{2}.pos  = [seqSets{seqSetIdx}{2}.pos seqParams(:,1)];
    seqSets{seqSetIdx}{2}.vel  = [seqSets{seqSetIdx}{2}.vel seqParams(:,2)];
    seqSets{seqSetIdx}{2}.acquire  = [seqSets{seqSetIdx}{2}.acquire seqParams(:,3)];
end

% Run sequence 1 and 2 iteratively then go back to home
sequences = {};
for seqSet = seqSets
    % decapsulate seqSet
    currentSeqSet = seqSet{:};
    % concatenate final composition of sequences
    if ~isempty(currentSeqSet{2}.part)
        sequences = [sequences;currentSeqSet];
    end
end
sequences = [sequences;homeCalibLimbs];

%% Training data acquisition

% create Yarp data interface. It can create the necessary yarp ports
% for logging the data and holds a method for connecting or disconnecting
% the ports. It also access data previously logged.
logger = SensorDataYarpI(robotName,parts,dataPath);
logger.openPorts();
logStart = @logger.connect;
logStop  = @logger.disconnect;

% create motion sequencer with defined sequences
sequencer = MotionSequencer('EncodersCalibrator',robotName,sequences,logStart,logStop);

% run sequencer until all data is acquired
sequencer.run();

% The data acquisition is complete. The sequencer has sent a stop request
% to the logger through 'acquire' method.
% The control board device is removed and the yarp devices and objects
% are deleted along with the objects in this context.
logger.closePorts();
